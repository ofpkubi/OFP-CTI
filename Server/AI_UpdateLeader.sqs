; args: [unit, si, gi]

? !(local LocalServerObject) : exit

_unit = _this select 0
_si = _this select 1
_gi = _this select 2

_group = (groupMatrix select _si) select _gi

call busyInit

? _group == (groupCommander select _si) : _this exec "Server\AI_UpdateCommander.sqs"; exit

; _idOrder = ((orderMatrix select _si) select _gi) select 0
_idOrder = -1

_unitsStarted = []

? !(alive _unit) : goto "WaitUntilAlive"

[_unit, _si, 200] exec "Common\EventAdd_InfantryKilled.sqs"
[_unit] exec "Common\AddRearmData.sqs"

_posSpawn = getPos _unit

#Update
	? !(alive _unit): goto "WaitUntilAlive"
	
	; check if he has become CO (all players on his side has left the game)
	? _group == (groupCommander select _si) : [_unit, _si, _gi] exec "Server\AI_UpdateCommander.sqs"; exit
	
	; check for new order
	? _idOrder == ((orderMatrix select _si) select _gi) select 0 : goto "NoNewOrder"
	_idOrder = ((orderMatrix select _si) select _gi) select 0
  _order = (orderMatrix select _si) select _gi
  _script = (orderDefs select (_order select 1)) select 2
  { if (alive _x) then { [_x, _si, _gi, _order select 2] exec format["Server\%1", _script] } } foreach _unitsStarted
	#NoNewOrder
	
	; start ai for new units
	_unitsStarted = _unitsStarted - [objNull]
	_unitsStart = (units _group) - _unitsStarted
	{ if (alive _x) then { [_x, _si, _gi] exec "Server\AI_Start.sqs"; _unitsStarted set [count _unitsStarted, _x] } } foreach _unitsStart
  
	_money = (groupMoneyMatrix select _si) select _gi
  ? _money >= (1000*(((aiSetting select _si) select _gi) select aisKeep) + 500) : [_si, _gi, giCO select _si, 500] exec "Common\SendMoneyGive.sqs"; goto "Sleep"
  ? (((aiSetting select _si) select _gi) select aisBuy) > 0 && _money > 500 : [_unit, _si, _gi] exec "Server\AI_CheckBuyUnit.sqs"

	#Sleep
	~5
	goto "Update"

#WaitUntilAlive
	@(alive leader _group)
	_unit = leader _group
  [_unit, _si, 200] exec "Common\EventAdd_InfantryKilled.sqs"
	
	_money = (groupMoneyMatrix select _si) select _gi

	? _money >= costRespawn : goto "Respawn"
	#WaitMoney
	_unit setPos [-2000 + _si*100, -2000 + _gi*100, 1000]
	; _unit setPos [(posCenter select 0) + _si*100, (posCenter select 1) + _gi*100, 1000]
	_unit setVelocity [0,0,0]
	~1
	_money = (groupMoneyMatrix select _si) select _gi
	? _money < costRespawn : goto "WaitMoney"

	#Respawn
	? costRespawn > 0 : [_si, _gi, costRespawn] call funcMoneySpend
	_objectRespawn = objNull
	call format["_objectRespawn = pvRespawnObjectAi%1", _si]
	? !(alive _objectRespawn) : _objectRespawn = [_objectRespawn, _si] call funcGetNearestRespawnObject

	_ts = _objectRespawn call funcGetStructTypeFromObject
	? _ts != -1 : goto "RespawnStruct"

	#RespawnMHQ
	_mhq = mhq select _si
	_dir = getDir _mhq
	_pos = getPos _mhq
	_posRespawn = [(_pos select 0)-(sin _dir)*10,(_pos select 1)-(cos _dir)*10,0]
  goto "RespawnPosSet"
  
	#RespawnStruct
	_res = [_objectRespawn, _ts, _si] call funcCalcUnitPlacementPosDir
	_posRespawn = _res select 0
	
	#RespawnPosSet
	_unit setVelocity [0,0,0]
	_unit setPos _posRespawn

  [_unit, _si] exec "Server\EquipGroupLeaderAI.sqs"

	unassignVehicle _unit
  _posSpawn = getPos _unit
	
  [_unit] exec "Common\AddRearmData.sqs"

	goto "Update"

