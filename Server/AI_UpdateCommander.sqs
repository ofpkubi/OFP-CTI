; args: [unit, si, gi]

? !(local LocalServerObject) : exit

_unit = _this select 0
_si = _this select 1
_gi = _this select 2

_group = (groupMatrix select _si) select _gi

@( !(isNull (mhq select si0)) && !(isNull (mhq select si1)) )

_posIdle = []
_posMove = [0,0]
_returnMove = ""

_base = baseDefs select ((random (count baseDefs)) - 0.5)

_factorBuildTime = ([60, 15] select dev)

_prims = _base select 0
_indexNextPrim = 0
_timeNextPrim = (_prims select _indexNextPrim) select bdTime
_costNextPrim = (structDefs select ((_prims select _indexNextPrim) select bdType)) select sdCost

_secs = _base select 1
_timeCheckBuildSec = 2*60
_objSec = []; { _objSec set [count _objSec, objNull] } foreach _secs

_timeCheckPlayerIncome = 0
_timeCheckNextUpgrade = ([20*60, 60] select dev)
_timeCheckEjectDrivers = ([30*60, 60] select dev)
_timeCheckSupport = 2*60
_timeCheckOrders = 30
_currentOrder = "TakeFirstTown"

_mhq = mhq select _si

_posStart = getPos _mhq
_dirBase = getDir _mhq

_giFixOrder = []

_townsTotal = count towns
_townsCentral = []
{ _res = [posCenter, _si, _townsCentral] call funcGetClosestEnemyTown; _townsCentral set [count _townsCentral, _res select 0] } foreach [1,2,3]

; special case when an ai group leader becomes co
_unitsStarted = (units _group) - [_unit]

_idOrder = ((orderMatrix select _si) select _gi) select 0

; _posStart exec "Server\CutDownTrees.sqs"

? !(alive _unit): goto "WaitUntilAlive"

_unit setCombatMode "YELLOW"; _unit setBehaviour "AWARE"; _unit setSpeedMode "FULL"

[_unit, _si, 200] exec "Common\EventAdd_InfantryKilled.sqs"
[_unit] exec "Common\AddRearmData.sqs"
  
#Update
	~5
	? !(alive _unit): goto "WaitUntilAlive"

	; check for new order
	? _idOrder == ((orderMatrix select _si) select _gi) select 0 : goto "NoNewOrder"
	_idOrder = ((orderMatrix select _si) select _gi) select 0
  _order = (orderMatrix select _si) select _gi
  _script = (orderDefs select (_order select 1)) select 2
  { [_x, _si, _gi, _order select 2] exec format["Server\%1", _script] } foreach _unitsStarted
	#NoNewOrder
	
	; start ai for new units
	_unitsStarted = _unitsStarted - [objNull]
	_unitsStart = (units _group) - _unitsStarted - [_unit]
	{ [_x, _si, _gi] exec "Server\AI_Start.sqs"; _unitsStarted set [count _unitsStarted, _x] } foreach _unitsStart

	_money = (groupMoneyMatrix select _si) select _gi

  ? _money > 500 : [_unit, _si, _gi] exec "Server\AICO_CheckBuyUnit.sqs"
	? time > _timeCheckOrders : goto _currentOrder

	? call busyCheck : goto "Update"

	_mhq = mhq select _si
	? time > _timeCheckPlayerIncome : [_si] exec "Server\AICO_CheckPlayerIncome.sqs"; _timeCheckPlayerIncome = time + ([5*60, 60] select dev)

	? (alive _mhq) && time > (_factorBuildTime*_timeNextPrim) && _money > (_costNextPrim+1000) : goto "BuildPrim"
	? time > _timeCheckBuildSec : goto "CheckBuildSec"
	
	? (alive _mhq) && (call format["pvWorkers%1 < 6", _si]) && _money >= costWorker : [_si] exec "Server\AddWorker.sqs"; goto "Update"

	? (count _posIdle) > 0 : _dist = [_posIdle, getPos _unit] call funcDistH; if (_dist > 10) then { _posMove = _posIdle; _returnMove = "Update"; goto "MoveToPos" }

	? time > _timeCheckSupport : [_unit, _si, _gi] exec "Server\AICO_CheckSupport.sqs"; _timeCheckSupport = time + 60; goto "Update"
	? time > _timeCheckNextUpgrade : [_si] exec "Server\AICO_CheckUpgrade.sqs"; _timeCheckNextUpgrade = time + ([5*60, 60] select dev)
	? time > _timeCheckEjectDrivers : goto "CheckEjectDrivers"

	? !(alive _mhq) && _money > costRepairMHQ : goto "RepairMHQ"
	
	goto "Update"

#BuildPrim
	_buildDesc = _prims select _indexNextPrim
	_structType = _buildDesc select bdType
	_structPosRel = [_buildDesc select bdPos, _dirBase] call funcVectorRot
	_structDir = (_buildDesc select bdDir) + _dirBase
	
	_posStruct = [(_posStart select 0) + (_structPosRel select 0), (_posStart select 1) + (_structPosRel select 1) ]

	_structDesc = structDefs select _structType
	_dist = _structDesc select sdDist
	_posMove = [(_posStruct select 0) - _dist*(sin _structDir), (_posStruct select 1) - _dist*(cos _structDir)]
	_posWatch = _posStruct
	_returnMove = "BuildPrim_BuildPosReached"
	goto "MoveToPos"
	#BuildPrim_BuildPosReached
	_money = (groupMoneyMatrix select _si) select _gi
  ? _money < _costNextPrim || !(alive _mhq) : goto "Update"
	[_structType, _si, _gi, _posStruct, _structDir] call fBuildStruct

	? _structType == stComm : _posIdle = [(_posStruct Select 0) - 0.5*(_structDesc select sdDist)*(sin _structDir), (_posStruct Select 1) - 0.5*(_structDesc select sdDist)*(cos _structDir)]; _posWatch = _posStruct

	_indexNextPrim = _indexNextPrim + 1
	? !(_indexNextPrim < (count _prims)) : _timeNextPrim = 10000*60; goto "Update"
	_costNextPrim = (structDefs select ((_prims select _indexNextPrim) select bdType)) select sdCost
	_timeNextPrim = (_prims select _indexNextPrim) select bdTime
	
	goto "Update"

#CheckBuildSec
  ; SET AI RESPAWN OBJECT
  _objectRespawn = [_unit, _si] call funcGetNearestRespawnObject
  ? call format["_objectRespawn != pvRespawnObjectAi%1", _si] : call format["pvRespawnObjectAi%1 = _objectRespawn; PublicVariable ""pvRespawnObjectAi%1""", _si]

	_i = 0 
	_c = count _secs
	#CheckBuildSec_CheckObject
	  ? !(_i<_c) : _timeCheckBuildSec = time + 2*60; goto "Update"
    ? time > _factorBuildTime*((_secs select _i) select bdTime) && !(alive (_objSec select _i)) : goto "BuildSec"
    _i = _i + 1
    goto "CheckBuildSec_CheckObject"

#BuildSec
	_buildDesc = _secs select _i
	_structType = _buildDesc select bdType
	_structPosRel = [_buildDesc select bdPos, _dirBase] call funcVectorRot
	_structDir = (_buildDesc select bdDir) + _dirBase
	_posStruct = [(_posStart select 0) + (_structPosRel select 0), (_posStart select 1) + (_structPosRel select 1) ]
	_structDesc = structDefs select _structType
	_dist = _structDesc select sdDist
	_posMove = [(_posStruct Select 0) - _dist*(sin _structDir), (_posStruct Select 1) - _dist*(cos _structDir)]
	_posWatch = _posStruct
	_returnMove = "BuildSec_BuildPosReached"
	goto "MoveToPos"
	#BuildSec_BuildPosReached
	_money = (groupMoneyMatrix select _si) select _gi
  ? _money < (_structDesc select sdCost) : goto "Update"
	; TODO ? !(alive _mhq) : goto "Update"
	_res = [_structType, _si, _gi, _posStruct, _structDir] call fBuildStruct
	_objSec set [_i, _res select 0]
	goto "Update"

#MoveToPos
	_unit doWatch _posWatch
	_unit doMove _posMove
	_timeForce = time + 120
	#CheckPosReached
		~5
		? !(alive _unit): goto "WaitUntilAlive"
		? time > _timeForce : (vehicle _unit) setPos _posMove; goto _returnMove
	  ? _money > 500 : [_unit, _si, _gi] exec "Server\AICO_CheckBuyUnit.sqs"
		_dist = [_posMove, getPos _unit] call funcDistH
		? _dist > 5 : goto "CheckPosReached"
	doStop _unit
	; _unit doWatch _posWatch
	~2
	? !(alive _unit): goto "WaitUntilAlive"
	goto _returnMove

#PatrolBase
	_currentOrder = "TakeFirstTown"
	_timeCheckOrders = time + 10*60
  [0, getPos _mhq, _si, _gi] exec "Common\SetWaypointCO.sqs"
	~1
	_giList = _si call funcGetAiGroupIds
	_i = 0
	_c = count _giList
	#PatrolBase_SetGroup
	  ? _i >= _c : goto "Update"
    _giSet = _giList select _i
  	[_si, _giSet, orderPatrolArea, [0,2]] exec "Common\SendAIGroupOrder.sqs"
  	~1
	  _i = _i + 1
	  goto "PatrolBase_SetGroup"

  goto "Update"

#TakeFirstTown
	_currentOrder = "CheckFirstTownTaken"
	_timeCheckOrders = time + 2*60

  _res = [getPos _mhq, _si, []] call funcGetClosestEnemyTown  	  
	_ti = _res select 0
	
	_giList = _si call funcGetAiGroupIds
	_i = 0
	_c = count _giList
	#TakeFirstTown_SetGroup
	  ? _i >= _c : goto "Update"
	  _giSet = _giList select _i
    [_si, _giSet, orderHoldTown, [_ti,1,0]] exec "Common\SendAIGroupOrder.sqs"
	  [_si, _giSet, aisPickupWait, 0] exec "Common\SendAIGroupSetting.sqs"
  	~1
	  _i = _i + 1
	  goto "TakeFirstTown_SetGroup"

#CheckFirstTownTaken
	_timeCheckOrders = time + 2*60
	? ("(_x select tdSide) == _si" count towns) == 0 : goto "Update"
  [0, getPos _mhq, _si, _gi] exec "Common\SetWaypointCO.sqs"
	~1
  [_si, _gi, orderPatrolArea, [0,2]] exec "Common\SendAIGroupOrder.sqs"
  ~1
	_currentOrder = "InitOrders"
	_timeCheckOrders = time + ([10*60, 60] select dev)
  goto "Update"

#InitOrders
	_currentOrder = "TakeHoldTowns"
	_timeCheckOrders = time + 1*60
	[1, posCenter, _si, _gi] exec "Common\SetWaypointCO.sqs"
	~1
	_giList = _si call funcGetAiGroupIds
	_giList = _giList - [_gi]
	_i = 0
	_c = count _giList
	#InitOrders_SetGroup
	  ? _i >= _c : goto "Update"
    _giSet = _giList select _i
    ? _i == 0 : [_si, _giSet, orderTakeHoldTowns, [0,0]] exec "Common\SendAIGroupOrder.sqs"; _giFixOrder set [count _giFixOrder, _giSet]
    ; TODO ? _i == 1 : [_si, _giSet, orderHoldTown, [_townsCentral select 0,3,0]] exec "Common\SendAIGroupOrder.sqs"; _giFixOrder set [count _giFixOrder, _giSet]
    ? _i == 1 : [_si, _giSet, orderTransportDuty, [0,1,9]] exec "Common\SendAIGroupOrder.sqs"; _giFixOrder set [count _giFixOrder, _giSet]
    ? _i > 1 : [_si, _giSet, orderTakeHoldTowns, [3,([1, 0] select dev)]] exec "Common\SendAIGroupOrder.sqs"
	  [_si, _giSet, aisPickupWait, 1] exec "Common\SendAIGroupSetting.sqs"
  	~1
	  _i = _i + 1
	  goto "InitOrders_SetGroup"

  goto "Update"

#TakeHoldTowns
	_currentOrder = "TakeHoldTowns"
	_timeCheckOrders = time + 5*60

	? (alive _mhq) && (("(_x select tdSide) == _si" count towns)/_townsTotal) > ratioAttackEnemy : goto "DestroyEnemy"

	_giList = _si call funcGetAiGroupIds
	_giList = _giList - [_gi]
	_i = 0
	_c = count _giList
	#TakeHoldTowns_SetGroup
	  ? _i >= _c : goto "Update"
	  _giSet = _giList select _i
	  ? !(_giSet in _giFixOrder) && (((orderMatrix select _si) select _giSet) select 1) != orderTakeHoldTowns : [_si, _giSet, orderTakeHoldTowns, [3,0]] exec "Common\SendAIGroupOrder.sqs"
    ? (((orderMatrix select _si) select _giSet) select 1) != orderTransportDuty : goto "TakeHoldTowns_SkipTransport"
      _res = [getPos _mhq, _si, []] call funcGetClosestEnemyTown  	  
      ? (_res select 0) == -1 : goto "TakeHoldTowns_SkipTransport"
	    [1, getPos ((towns select (_res select 0)) select tdFlag), _si, _gi] exec "Common\SetWaypointCO.sqs"
	    ~1
      [_si, _giSet, orderTransportDuty, [0,1,7]] exec "Common\SendAIGroupOrder.sqs"
  	#TakeHoldTowns_SkipTransport
  	~1
	  _i = _i + 1
	  goto "TakeHoldTowns_SetGroup"
  
#DestroyEnemy
  _currentOrder = "DestroyEnemy"
	_timeCheckOrders = time + 5*60
	? !(alive _mhq) || (("(_x select tdSide) == _si" count towns)/_townsTotal) <= ratioAttackEnemy : goto "TakeHoldTowns"
  _res = [getPos _mhq, _si]  call funcGetClosestEnemyObject
  _object = _res select 0
  ? isNull _object : goto "Update"
	[9, getPos _object, _si, _gi] exec "Common\SetWaypointCO.sqs"
	~1
	_giList = _si call funcGetAiGroupIds
	_giList = _giList - [_gi]
	_i = 0
	_c = count _giList
	#DestroyEnemy_SetGroup
	  ? _i >= _c : goto "Update"
	  _giSet = _giList select _i
	  ? !(_giSet in _giFixOrder) && (((orderMatrix select _si) select _giSet) select 1) == orderTakeHoldTowns : [_si, _giSet, orderPatrolArea, [9,0]] exec "Common\SendAIGroupOrder.sqs"
    ? (((orderMatrix select _si) select _giSet) select 1) == orderTransportDuty : [_si, _giSet, orderTransportDuty, [0,9,9]] exec "Common\SendAIGroupOrder.sqs"
  	~1
	  _i = _i + 1
	  goto "DestroyEnemy_SetGroup"

#CheckEjectDrivers
_timeCheckEjectDrivers = time + ([5*60, 60] select dev)
_units = (units _group) - [_unit]
_i = 0
_c = count _units
#CheckEjectDrivers_CheckUnit
  ? _i >= _c : goto "Update"
  _u = _units select _i
  _v = vehicle _u
  _i = _i + 1
  
  ? !(alive _u) || _u == _v || _u != driver _v || isNull (gunner _v) || ([getPos _v, getPos _mhq] call funcDistH) < 100 : goto "CheckEjectDrivers_CheckUnit"
  
  unassignVehicle _u
  _u action ["EJECT", vehicle _u]
  ~2
  _u setDamage 1
  ~2
  deleteVehicle _u
  goto "CheckEjectDrivers_CheckUnit"
  
#RepairMHQ
  _posMove = [getPos _mhq, 2, 3] call funcGetRandomPos
  _posWatch = getPos _mhq
  _returnMove = "MHQReached"; goto "MoveToPos"
  #MHQReached
  (_gi + 18*_si) exec "Server\RepairMHQ.sqs"
  goto "Update"
  
#WaitUntilAlive
	@(alive leader _group)
	_unit = leader _group

  [_unit, _si, 200] exec "Common\EventAdd_InfantryKilled.sqs"
	
	_money = (groupMoneyMatrix select _si) select _gi

	? _money >= costRespawn : goto "Respawn"
	#WaitMoney
	_unit setPos [-2000 + _si*100, -2000 + _gi*100, 1000]
	; _unit setPos [(posCenter select 0) + _si*100, (posCenter select 1) + _gi*100, 1000]
	_unit setVelocity [0,0,0]
	~1
	_money = (groupMoneyMatrix select _si) select _gi
	? _money < costRespawn : goto "WaitMoney"

	#Respawn
	? costRespawn > 0 : [_si, _gi, costRespawn] call funcMoneySpend
	_objectRespawn = objNull
	call format["_objectRespawn = pvRespawnObjectAi%1", _si]
	? !(alive _objectRespawn) : _objectRespawn = [_objectRespawn, _si] call funcGetNearestRespawnObject

	_ts = _objectRespawn call funcGetStructTypeFromObject
	? _ts != -1 : goto "RespawnStruct"

	#RespawnMHQ
	_mhq = mhq select _si
	_dir = getDir _mhq
	_pos = getPos _mhq
	_posRespawn = [(_pos select 0)-(sin _dir)*10,(_pos select 1)-(cos _dir)*10,0]
  goto "RespawnPosSet"
  
	#RespawnStruct
	_res = [_objectRespawn, _ts, _si] call funcCalcUnitPlacementPosDir
	_posRespawn = _res select 0
	
	#RespawnPosSet
	_unit setVelocity [0,0,0]
	_unit setPos _posRespawn

  [_unit, _si] exec "Server\EquipGroupLeaderAI.sqs"

	unassignVehicle _unit
  _posSpawn = getPos _unit
  [_unit] exec "Common\AddRearmData.sqs"
  _unit setCombatMode "YELLOW"; _unit setBehaviour "AWARE"; _unit setSpeedMode "FULL"

	goto "Update"
	
