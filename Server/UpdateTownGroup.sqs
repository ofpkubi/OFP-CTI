; args: [unit]
; unit : group leader at start

? !(local LocalServerObject) : exit
_unit = _this select 0
_unit disableAI "TARGET"; _unit disableAI "AUTOTARGET"; _unit disableAI "MOVE"
~5

_group = group _unit

_distSpawn = viewDistance + 500
_cLast = 0

_si = -1
? side _unit == sides select si0 : _si = si0
? side _unit == sides select si1 : _si = si1

timeReinforceTown = 45

#Init
_res = [getPos _unit, [siRes], []] call funcGetClosestTown
_flag = (_res select 0) select tdFlag
_posFlag = getPos _flag
_ti = _res select 2
? _si == -1 : format["ERROR: _si == -1 set in UpdateTownGroup.sqs for %1", (towns select _ti) select tdName] call fDebugLog; exit
_siLast = (_res select 0) select tdSide

;deleteVehicle _unit
_unit setpos [1,1,1]; _unit setdamage 1

? isNull _group : format["ERROR: _group is NULL at init for %1 town group in '%1'", sideNames select _si, (towns select _ti) select tdName] call fDebugLog; exit

(townGroups select _si) set [count (townGroups select _si), _group]

; player globalchat format["townGroups: %1 - %2", count (townGroups select si0), count (townGroups select si1)]

_timeReinforce = time + timeReinforceTown
_bCheckSupport = true
_support = objNull
_unitsSupport = []


@(((upgMatrix select _si) select upgTownGroup ) == 2)


#Update
  ~(25 + random 10)
	# check if town taken (won)
	_siTown = (towns Select _ti) select tdSide
	? _siTown == _si && _siLast != _si : _timeReinforce = time + timeReinforceTown
	_siLast = _siTown
	? _siTown == _si && time > _timeReinforce : goto "Reinforce"
	? (count (units _group)) == 0 : goto "Update"
	{ if (alive _x) then { _x doWatch ([getPos _x, 200, 200] call funcGetRandomPos); if (unitReady _x) then { doStop _x } } } foreach units _group
	
	? _siTown != _si : goto "TakeFlag"
  _bCheckSupport = !_bCheckSupport
  ? _bCheckSupport : goto "Support"
	goto "Patrol"

#Patrol
  ; CHECK HIBERNATE
  _hibernate = true
  { _g = _x; { if ((_x distance _flag) < _distSpawn) then { _hibernate = false } } foreach (units _g) } foreach (groupMatrix select (siEnemy select _si))
  { _g = _x; { if ((_x distance _flag) < _distSpawn) then { _hibernate = false } } foreach (units _g) } foreach groupsPatrol
  ? _hibernate : goto "Hibernate"
  
	_c = count (units _group)
	? _c < _cLast : [_ti, _si] exec "Server\Info\TownGroupLoss.sqs"
	_cLast = _c
	
	{ if ( ( (random 1) < 0.5 || (_x distance _flag) > 150 ) && (alive _x) && !(_x in _unitsSupport) ) then { _x doMove ([_posFlag, 10, 150] call funcGetRandomPos) } } foreach units _group
	goto "Update"

#TakeFlag
	{ if ((random 1) < 0.5 && !(_x in _unitsSupport) ) then { _x doMove ([_posFlag, 5, 5] call funcGetRandomPos) } } foreach units _group
	goto "Update"

#Reinforce
  _timeReinforce = time + timeReinforceTown
	? count (units _group) < 10 : goto "AddInf"
        ? count (units _group) == 10 : goto "AddTank"
	goto "Update"

#AddInf
  _type = -1
  while "_type == -1" do { _type = (infTown select _si) call funcGetRandomUnitType }
  _pos = [_posFlag, 25, 150] call funcGetRandomPos
  ? isNull _group : format["ERROR: _group is NULL at AddInf for %1 town group in '%1'", sideNames select _si, (towns select _ti) select tdName] call fDebugLog; exit
  _res = [_type, 0, 0, 0, _pos, random 360, _si, -1, _group, 0, 0] exec "Common\AddUnit.sqs"
  ~1
  ;player globalchat format["AddInf: %1 (%2)", (towns select _ti) select tdName, count (units _group)]   

  _group setCombatMode "YELLOW"; _group setBehaviour "STEALTH"; _group setSpeedMode "NORMAL"
	
	
  goto "Update"

#AddTank
  ? ((upgMatrix select _si) select upgTownGroupb) != 2: goto "update"
  _type = -1
  while "_type == -1" do { _type = (armorTown select _si) call funcGetRandomUnitType }
  _pos = [_posFlag,150, 150] call funcGetRandomPos
  [_type, 1, 1, 0, _pos, random 360, _si, -1, _group, 0, 0] exec "Common\AddUnit.sqs"
   ;player globalchat format["AddTank: %1 (%2)", (towns select _ti) select tdName, count (units _group)]
  
goto "Update"


#Hibernate
  _unitsSpawn = ("alive _x" count (units _group))
  { deleteVehicle _x } foreach (units _group)
  
#CheckSpawn
  ~10
  _hibernate = true
  { _g = _x; { if ((_x distance _flag) < _distSpawn) then { _hibernate = false } } foreach (units _g) } foreach (groupMatrix select (siEnemy select _si))
  { _g = _x; { if ((_x distance _flag) < _distSpawn) then { _hibernate = false } } foreach (units _g) } foreach groupsPatrol
  ? !_hibernate : goto "Spawn"
	? time > _timeReinforce && _unitsSpawn < 12 : _timeReinforce = time + timeReinforceTown; _unitsSpawn = _unitsSpawn + 1
  goto "CheckSpawn"
  
#Spawn
  ? isNull _group : format["ERROR: _group is NULL at spawn for %1 town group in '%1'", sideNames select _si, (towns select _ti) select tdName] call fDebugLog; exit
  _i = 0
  #SpawnInf
    _type = -1
    while "_type == -1" do { _type = (infTown select _si) call funcGetRandomUnitType }
    _pos = [_posFlag, 150, 150] call funcGetRandomPos
    [_type, 0, 0, 0, _pos, random 360, _si, -1, _group, 0, 0] exec "Common\AddUnit.sqs"
    ~1
    _i = _i + 1
    ? _i < _unitsSpawn : goto "SpawnInf"
  
	_cLast = count (units _group)
  ; player globalchat format["%1: %2 (%3)", (towns select _ti) select tdName, _model, count (units _group)]
  _group setCombatMode "YELLOW"; _group setBehaviour "STEALTH"; _group setSpeedMode "NORMAL"
  goto "Update"
  
#Support
  ? !(alive _support) : _res = [getPos _flag, _si, typesSupport select _si, []] call funcGetClosestVehicle; goto "Support_VehicleSet"
  _dist = _support distance _flag
  ? _dist > 500 : _res = [getPos _flag, _si, typesSupport select _si, []] call funcGetClosestVehicle; goto "Support_VehicleSet"
  goto "Support_CheckUnits"
  
  #Support_VehicleSet
  _support = _res select 0
  _dist = _res select 1
  ? _dist > 500 : _unitsSupport = []; goto "Update"
  
  #Support_CheckUnits
  _i = 0
  _units = units _group
  #Support_CheckUnit
    ? !(alive _support) : _unitsSupport = []; goto "Update"
    ? !(_i < count _units) : goto "Support_Move"
    _u = _units select _i
    _i = _i + 1

    ? !(alive _u) : goto "Support_CheckUnit"
	  ? _u in _unitsSupport && (_u distance _support) < rangeSupport : goto "Support_Perform"
    ? (damage _u) > 0.2 && !(_u in _unitsSupport) : _unitsSupport set [count _unitsSupport, _u]; goto "Support_CheckUnit"
    _rearm = false
    _wpnPrim = primaryWeapon _u
    _wpnSec = secondaryWeapon _u
    ? _wpnPrim != "" : if ((_u ammo _wpnPrim) == 0) then { _rearm = true }
    ? _wpnSec != "" : if ((_u ammo _wpnSec) == 0) then { _rearm = true }
    ? _rearm && !(_u in _unitsSupport) : _unitsSupport set [count _unitsSupport, _u]
    goto "Support_CheckUnit"
    
    #Support_Perform
    ; format["UTG: %1 performs support in %2 ", _u, (towns select _ti) select tdName] call fDebugLog
    [_u, _si, -1, _u, -1, _support] exec "Server\AI_Heal.sqs"
    [_u, _si, -1, _u, -1, _support] exec "Server\AI_Rearm.sqs"
    ~5
	  _unitsSupport = _unitsSupport - [_u]
    goto "Support_CheckUnit"
    
  #Support_Move
  _unitsSupport = _unitsSupport - [objNull]
  ; TEST { if (alive _x) then { _posMove = [getPos _support, 5, 5] call funcGetRandomPos; _x doMove _posMove; player globalchat format["UTG: %1 moves to support in %2 ", _x, (towns select _ti) select tdName]; } } foreach _unitsSupport
  { if (alive _x) then { _posMove = [getPos _support, 5, 5] call funcGetRandomPos; _x doMove _posMove } } foreach _unitsSupport
  goto "Update"